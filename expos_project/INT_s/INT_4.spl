[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 + 13]=SP;
alias user_sp R0;
user_sp = SP;
SP = [PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 + 11]*512 -1;

alias sys_call R1;
sys_call = [[PTBR + 2*(user_sp-5)/512]*512 + (user_sp-5)%512];

alias file_name R2;
file_name =[[PTBR + 2*(user_sp-4)/512]*512 + (user_sp-4)%512];

alias pte R10;
pte=PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16;

alias ret_val R9;
ret_val = [PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512;

[pte + 9]=sys_call;

//CREATE FILE
if(sys_call == 1) then
	
	alias perm R3;
	perm = [[PTBR + 2*(user_sp-3)/512]*512 + (user_sp-3)%512];	
	alias i R4;
	i=0;
	
	while(i<60) do  	
		if([INODE_TABLE + i*16 + 1]==file_name && [INODE_TABLE + i*16 + 0]==2) then
			[ret_val]=0;  //ALREADY EXISTS
			[pte +9]=0;
			SP=user_sp;
			ireturn;
		endif;
	i=i+1;
	endwhile;

	i=0;
	while(i<60) do  //FINDING FREE INODE ENTRY
		if([INODE_TABLE + i*16 +1]==-1) then
			break; 
		endif;
	i=i+1;
	endwhile;

	if(i==60) then //NO INODE FREE ENTRY
		[ret_val]=-1;
        [pte +9]=0;
        SP=user_sp;
        ireturn;
     endif;

     alias i_index R8;
     i_index = INODE_TABLE + i*16;

	[i_index +0]=2;          //TYPE
	[i_index +1]=file_name;  //NAME
	[i_index +2]=0;	    //SIZE
	[i_index + 8]=-1;    //NO DISK BLOCKS ALLOCATED
	[i_index + 9]=-1;
	[i_index + 10]=-1;
	[i_index + 11]=-1;		
	[i_index + 3]=[pte + 3];  //USERID
	[i_index + 4]=perm;  //PERMISSION
		
	//SET ROOT FILE ENTRY

	alias r_index R7;
	r_index = ROOT_FILE + i*8 ;

	[r_index + 0]=file_name; //NAME
	[r_index  + 1]=0;	//SIZE
	[r_index  + 2]=2;	//TYPE
	[r_index  + 4]=perm;	//PERMISSION
	[r_index  + 3]=[USER_TABLE + 2*[pte +3]]; //USERNAME
	
	[ret_val]=0;
    [pte +9]=0;
    SP=user_sp;
    ireturn;
endif;

//DELETE FILE
if(sys_call == 4) then

	alias i R3;
	i=0;
	while(i<60) do
		if([INODE_TABLE + i*16 +1]==file_name) then
			break;
		endif;
	i=i+1;
	endwhile;	

	if(i==60) then  //FILE NOT PRESENT
		[ret_val]=0;
	endif;

	if([INODE_TABLE + i*16 +0]!=2) then //NOT A DATA FILE
		[ret_val]=-1;
	endif;

	if(i==60 || [INODE_TABLE + i*16 +0]!=2) then
		[pte + 9]=0;
        SP=user_sp;
        ireturn;
	endif;
	
	if([INODE_TABLE + i*16 + 4]==0) then  //NEITHER ROOT NOR OWNER 
		if(([INODE_TABLE + i*16 +3]!=[pte + 3]) || ([INODE_TABLE + i*16 +3]!=1)) then  
			[ret_val]=-1;
            [pte + 9]=0;
            SP=user_sp;
            ireturn;
        endif;
	endif;
	
	//ACQUIRE INODE
	backup;
	R1=4;
	call MOD_0;
	restore;
	
	//FILE IS OPEN THEN CANNOT DELETE
	if([FILE_STATUS_TABLE + i*4 +1]!=-1) then
		//RELEASE INODE
			backup;
       		R1=5;
        	call MOD_0;
        	restore;
		[ret_val]=-2;
        [pte + 9]=0;
        SP=user_sp;
        ireturn;
    endif;
	
	alias j R5;
	j=8;
	while([INODE_TABLE + i*16 + j]!=-1 && j<12) do
		alias index R6;
		index = [INODE_TABLE + i*16 + j]%4;
		if([BUFFER_TABLE + 4*index ]==[INODE_TABLE + i*16 + j]) then
			if([BUFFER_TABLE + 4*index  + 1]==1) then
				[BUFFER_TABLE + 4*index + 1]=0;
			endif;
		endif;
		
		backup;  //RELEASE BLOCK
		R1=4;
		R3=[INODE_TABLE + i*16 + j];
		call MOD_2;
		restore;
	j=j+1;
	endwhile;
	
	[INODE_TABLE + i*16 +1]=-1;  //INVALIDATE INODE ENTRY
	[ROOT_FILE + i*8 +0]=-1;    //INVALIDATE ROOT ENTRY

		backup;//RELEASE INODE
        R1=5;
        call MOD_0;
        restore;

        [ret_val]=0;
       	[pte + 9]=0;
        SP=user_sp;
        ireturn;
endif;
ireturn;
