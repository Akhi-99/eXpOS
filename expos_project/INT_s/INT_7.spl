alias pte R10;
pte = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;

[pte + 13]=SP;
alias user_sp R0;
user_sp = SP;

alias sys_call R9;
sys_call = [[PTBR + 2*(user_sp-5)/512]*512 + (user_sp-5)%512];

alias file_desc R8;
file_desc = [[PTBR + 2*(user_sp-4)/512]*512 + (user_sp-4)%512];

alias ret_val R7;
ret_val = [PTBR + 2*(user_sp-1)/512]*512 + (user_sp-1)%512;

alias word R6;
word = [[PTBR + 2*(user_sp-3)/512]*512 + (user_sp-3)%512];

[pte + 9]=sys_call;

SP=[pte+11]*512 -1;

if(file_desc ==-2) then		//terminal write
	backup;
	R1=3;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=word;
	call MOD_4;
	restore;

	[pte+9]=0;
	[ret_val]=0;
	SP=user_sp;
	ireturn;
endif;




if(file_desc <0 || file_desc >7) then	//file desc invalid
	[pte+9]=0;
	[ret_val]=-1;
	SP=user_sp;
	ireturn;
endif;



alias ppr R1;
ppr = [pte+11]*512 + 496;

if([ppr + 2*file_desc]!=0) then 	//not a file
	[pte+9]=0;
	[ret_val]=-1;
	SP=user_sp;
	ireturn;
endif;


alias oft_i R2;
oft_i = [ppr + 2*file_desc +1];

alias inod_i R3;
inod_i = [OPEN_FILE_TABLE + 4*oft_i];

if([INODE_TABLE + 16*inod_i + 3]!=[pte+3] && [INODE_TABLE + 16*inod_i + 4]==0) then 	//no permissions
	[pte+9]=0;
	[ret_val]=-3;
	SP=user_sp;
	ireturn;
endif;




multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
R1=4;
R2=[SYSTEM_STATUS_TABLE+1];				//acquire inode
R3=inod_i;
call MOD_0;
R15=R0;
multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

if(R15==-1) then 		//acquire inode fails
	[pte+9]=0;
	[ret_val]=-1;
	SP=user_sp;
	ireturn;
endif;



alias l_seek R4;
l_seek = [OPEN_FILE_TABLE + 4*oft_i +2];

if(l_seek==2048) then	//lseek==max-file-size
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1=5;
	R2=[SYSTEM_STATUS_TABLE+1];				//release inode
	R3=inod_i;
	call MOD_0;
	R15=R0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

	[pte+9]=0;
	[ret_val]=-2;
	SP=user_sp;
	ireturn;
endif;

if(l_seek%512 ==0 && l_seek==[INODE_TABLE + inod_i*16 +2]) then

		
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
		R1=3;
		R2=[SYSTEM_STATUS_TABLE+1];		//get free block
		call MOD_2;
		R15=R0;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

		
		R13=R15;
		

		if(R15==-1) then		//no free blocks
			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1=5;
			R2=[SYSTEM_STATUS_TABLE+1];				//release inode
			R3=inod_i;
			call MOD_0;
			R15=R0;
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

			[pte+9]=0;
			[ret_val]=-2;
			SP=user_sp;
			ireturn;
		endif;

		
		[INODE_TABLE + 16*inod_i + 8 + (l_seek/512)]= R13;
endif;

alias block_num R5;
alias off_set R11;



block_num=[INODE_TABLE + 16*inod_i + 8 + (l_seek/512)];
off_set = l_seek%512;



		//buffered write;
backup;
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
R3=block_num;
R4=off_set;
R5=word;
call MOD_3;
restore;



if(l_seek==[INODE_TABLE + inod_i*16 +2]) then
	[INODE_TABLE + inod_i*16 +2]=[INODE_TABLE + inod_i*16 +2]+1;
	[ROOT_FILE + inod_i*8 + 1]=[ROOT_FILE + inod_i*8 + 1]+1;
endif;

[OPEN_FILE_TABLE + oft_i*4 + 2]=[OPEN_FILE_TABLE + oft_i*4 + 2]+1;

			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1=5;
			R2=[SYSTEM_STATUS_TABLE+1];				//release inode
			R3=inod_i;
			call MOD_0;
			R15=R0;
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

[pte+9]=0;
[ret_val]=0;
SP=user_sp;
ireturn;

	
