alias fun_no R1;
alias curr_pid R2;

if(fun_no==2 || fun_no==1) then 	//buffered read  && buffered write
	alias block_num R3;
	alias off_set R4;
	alias word R5;

	alias buff_num R6;
	buff_num = block_num%4;

	backup;
	R1=1;		//acquire buffer
	R2=curr_pid;
	R3=buff_num;
	call MOD_0;
	restore;

	if([BUFFER_TABLE + 4*buff_num +0]!=block_num) then
		if([BUFFER_TABLE + 4*buff_num +1]==1) then
			backup;
			R1=1;
			R2=curr_pid;			//disk store
			R3=71+ buff_num;
			R4=[BUFFER_TABLE + 4*buff_num +0];
			call MOD_4;
			restore;
			[BUFFER_TABLE + 4*buff_num +1]=0;

		endif;

		backup;
		R1=2;				//disk load
		R2=curr_pid;
		R4=block_num;
		R3=71+ buff_num;
		call MOD_4;
		restore;

		[BUFFER_TABLE + 4*buff_num +0]=block_num;
	endif;

	
	if(fun_no==2) then	//buffered read
		[[PTBR + 2*word/512]*512 + word%512]=[ (71+buff_num)*512 + off_set];
	else		//buffered write
		
		[ (71+buff_num)*512 + off_set]=word;

		[BUFFER_TABLE + 4*buff_num +1]=1;
	endif;



	backup;
	R1=2;			//release buffer
	R2=curr_pid;
	R3=buff_num;		
	call MOD_0;
	restore;

	return;
endif;



if(fun_no==3) then 		//OPEN 
	alias file_name R3;

	alias i R4;
	i=0;
	while(i<60) do
		if([INODE_TABLE + i*16 + 1]==file_name) then
			break;
		endif;
	i=i+1;
	endwhile;

	if(i==60) then  //filename not found in inode_table
		R0=-1;
		return;
	endif;

	multipush(R0,R1,R2,R3,R4); //acquire inode
	R1=4;
	R2=curr_pid;
	R3=i;
	call MOD_0;
	R15=R0;
	multipop(R0,R1,R2,R3,R4);

	if(R15==-1) then  	//IF LOCKING FAILS
		R0=-1;
		return;
	endif;

	alias i_index R5;
	i_index =INODE_TABLE + i*16;

	if([i_index +1]!=file_name || [i_index + 0]==3) then    //if not data file or file missing
			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1=5;
			R2=curr_pid;		//release inode
			R3=i;
			call MOD_0;
			R15=R0;
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

			R0=-1;
			return;
	endif;

	alias j R6;
	j=0;
	while(j<32) do
		if([OPEN_FILE_TABLE + 4*j]==-1) then
				break;
		endif;
	j=j+1;	
	endwhile;

	if(j==32) then  //NO FREE ENTRY IN OPEN FILE TABLE
			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
			R1=5;
			R2=curr_pid;		//release inode
			R3=i;
			call MOD_0;
			R15=R0;
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

			R0=-1;
			return;
	endif;

	alias oft_index R7;
	oft_index = OPEN_FILE_TABLE + j*4;

	if(file_name =="root") then
		[oft_index +0]=INODE_ROOT;
	else
		if([FILE_STATUS_TABLE + i*4 +1]==-1) then
			[FILE_STATUS_TABLE + i*4 +1]=1;
		else
			[FILE_STATUS_TABLE + i*4 +1]=[FILE_STATUS_TABLE + i*4 +1]+1;
		endif;

		[oft_index +0]=i;
	endif;

	[oft_index + 1]=1; 		//OPEN INSTANCE COUNT
	[oft_index + 2]=0;		//LSEEK

	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);
	R1=5;
	R2=curr_pid;		//release inode
	R3=i;
	call MOD_0;
	R15=R0;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10);

	R0=j;
	return;
endif;


if(fun_no ==4) then  	//CLOSE
	alias oft_j R3;
	alias inod_i R4;
	inod_i = [OPEN_FILE_TABLE + 4*oft_j];

	[OPEN_FILE_TABLE + 4*oft_j +1]=[OPEN_FILE_TABLE + 4*oft_j +1]-1;

	if([OPEN_FILE_TABLE + 4*oft_j +1]==0) then //OPEN INST CNT ==0
			[OPEN_FILE_TABLE + 4*oft_j +0]=-1;
			[OPEN_FILE_TABLE + 4*oft_j +1]=-1;
			[OPEN_FILE_TABLE + 4*oft_j +2]=-1;
			if(inod_i!=0) then	//dec file open count
					[FILE_STATUS_TABLE+ 4*inod_i +1]=[FILE_STATUS_TABLE+ 4*inod_i +1]-1;
			endif;
			if([FILE_STATUS_TABLE+ 4*inod_i +1]==0) then
				[FILE_STATUS_TABLE+ 4*inod_i +1]=-1;
			endif;
	endif;
	return;
endif;











